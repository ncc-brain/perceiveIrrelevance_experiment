
% this script if for deciding the groups you want to conduct chi square &
% create contingency tables for them 
% finally using the function chiSquareFunction, you conduct chi square of
% independence

% in this experiment we will compare 2 probes (orientation & duration) and performance in surprise %
% first control 

clear
clc
addpath('./')
configIrrelevant;

cd(processedDataIrrelevant)
addpath(genpath(processedDataIrrelevant)); 

% load files
load('faceCritical.mat');
load('objectCritical.mat');
load('facePostSurprise.mat');
load('objectPostSurprise.mat');

faceCritical= faceCriticalTrial;
objectCritical = objectCriticalTrial;

facePost = facePostSurpriseTrials;
objectPost = objectPostSurpriseTrials;


%% Contingency tables 

%critical

orientationAllFace = [];
durationAllFace = [];
orientationAllObject =[];
durationAllObject = [];

% check size 

if numel(faceCritical) ~= numel(objectCritical)

    disp('ERROR! , size of the ')

for i = 1:numel(faceCritical) 

    currentCellFace = faceCritical{i};
    currentOrientationFace = currentCellFace.orientationPerformance;
    currentDurationFace = currentCellFace.durationPerformance;
    orientationAllFace(i) = currentOrientationFace;
    durationAllFace (i) = currentDurationFace;

    currentCellObject = objectCritical{j};
    currentOrientationObject = currentCellObject.orientationPerformance;
    currentDurationObject = currentCellObject.durationPerformance;
    orientationAllObject(j) = currentOrientationObject;
    durationAllObject(j) = currentDurationObject;
    
    
end


for j = 1:numel(objectCritical)


    
end

%generate contingency tables 

AllOrientation = [orientationAllFace,orientationAllObject];
AllDuration = [durationAllFace,durationAllObject];


AllOrientation = categorical(AllOrientation, [0, 1], categoryNames);
AllDuration = categorical(AllDuration,[0, 1], categoryNames);

[contTable, chi2, p, labels] = crosstab(AllOrientation, AllDuration);

% Manually create unique row and column labels
orientationLabels = {'OrientationWrong', 'OrientationCorrect'};
durationLabels = {'DurationWrong', 'DurationCorrect'};

contingencyTable = array2table(contTable, 'VariableNames', durationLabels, 'RowNames', orientationLabels);

% save the table 
contingencyTableFile = 'contingencyTable.mat';

save(fullfile(processedDataIrrelevant,contingencyTableFile),'contingencyTable');


% surprise and postsurprise performance contingency table 

%first post surprise table- face

for i = 1:numel(facePost) 

    currentPostFace = facePost{i};
    currentOrientationPostFace= currentPostFace.orientationAccuracy(1);
    currentDurationPostFace = currentPostFace.durationAccuracy(1);
    orientationPostFace(i) = currentOrientationPostFace;
    durationPostFace(i) = currentDurationPostFace;
    
end

% first post surprise table- object

for i = 1:numel(objectPost) 

    currentPostObject = objectPost{i};
    currentOrientationPostObject= currentPostObject.orientationAccuracy(1);
    currentDurationPostObject = currentPostObject.durationAccuracy(1);
    orientationPostObject(i) = currentOrientationPostObject;
    durationPostObject(i) = currentDurationPostObject;
    
end


AllPostSurprise = [ orientationPostFace,durationPostFace,orientationPostObject, durationPostObject];
AllSurprise = [orientationAllFace,orientationAllObject,durationAllFace,durationAllObject];






% contingency table 



AllSurprise = categorical(AllSurprise, [0, 1], categoryNames);
AllPostSurprise = categorical(AllPostSurprise,[0, 1], categoryNames);

[contTablePerf, chi2, p, labelsPerf] = crosstab(AllSurprise, AllPostSurprise);

% Manually create unique row and column labels
SurpriseLabels = {'SurpriseWrong', 'SurpriseCorrect'};
PostSurpriseLabels = {'PostWrong', 'PostCorrect'};

contingencyTablePerf = array2table(contTablePerf, 'VariableNames', SurpriseLabels, 'RowNames', PostSurpriseLabels);
%%
% chi square for independence

% null hypothsis : orientation and duration are not related
% h1 : orientation & duration are related. 

% step 1 

% calculate the expected frequencies 

totalObservation = sum(contTable(:));

rowTotal = [];
colTotal = [];
expectedTable = []; % expected values if two variables are unrelated. 


for i = 1:size(contTable,1)
    for j = 1:size(contTable,2) % contTable involves observed values. 
        rowTotal = sum(contTable(i, :));     % row r total
        colTotal = sum(contTable(:, j));     % Column c total
        expectedTable(i, j) = (rowTotal * colTotal) / totalObservation; % here I calculate the expected frequency if variables are unrelated
    end
end


% calculate chi square 

% X2 = ((observed-expected)/expected)2 

 cqiSquareFirstStep = [];

for i = 1:size(contTable,1)

     for j = 1:size(contTable,2)

         cqiSquareFirstStep(i,j) = ((contTable(i,j) - expectedTable(i,j))^2)/(expectedTable(i,j));

     end

end

cqiSquare = sum(cqiSquareFirstStep(:));

% critical chi square value ( df and alpha is necessery)

criticalChi = chi2inv((1-0.05),1); % p is percentile, 1 is df


if cqiSquare > criticalChi

    disp('groups are significantly different')
else
    disp('groups are not significanly different')

end

%Fischer's exact test 

%[h,p,stats] = fishertest(contTable);
